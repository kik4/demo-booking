-- Create bookings table
create table "public"."bookings" (
    "id" bigint generated by default as identity not null,
    "profile_id" bigint not null,
    "service_name" text not null,
    "notes" text not null,
    "start_time" timestamp not null,
    "end_time" timestamp not null,
    "created_at" timestamp not null default now(),
    "updated_at" timestamp not null default now(),
    "deleted_at" timestamp
);

-- Enable RLS
alter table "public"."bookings" enable row level security;

-- Create primary key
CREATE UNIQUE INDEX bookings_pkey ON public.bookings USING btree (id);
alter table "public"."bookings" add constraint "bookings_pkey" PRIMARY KEY using index "bookings_pkey";

-- Add foreign key constraint to profiles table
alter table "public"."bookings" add constraint "bookings_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

-- Create index on profile_id for better query performance
CREATE INDEX idx_bookings_profile_id ON public.bookings(profile_id);

-- Add check constraint to ensure end_time is after start_time
alter table "public"."bookings" add constraint "bookings_time_range_valid" CHECK (end_time > start_time);

-- Grant permissions to anon
grant delete on table "public"."bookings" to "anon";
grant insert on table "public"."bookings" to "anon";
grant references on table "public"."bookings" to "anon";
grant select on table "public"."bookings" to "anon";
grant trigger on table "public"."bookings" to "anon";
grant truncate on table "public"."bookings" to "anon";
grant update on table "public"."bookings" to "anon";

-- Grant permissions to authenticated
grant delete on table "public"."bookings" to "authenticated";
grant insert on table "public"."bookings" to "authenticated";
grant references on table "public"."bookings" to "authenticated";
grant select on table "public"."bookings" to "authenticated";
grant trigger on table "public"."bookings" to "authenticated";
grant truncate on table "public"."bookings" to "authenticated";
grant update on table "public"."bookings" to "authenticated";

-- Grant permissions to service_role
grant delete on table "public"."bookings" to "service_role";
grant references on table "public"."bookings" to "service_role";
grant select on table "public"."bookings" to "service_role";
grant trigger on table "public"."bookings" to "service_role";
grant truncate on table "public"."bookings" to "service_role";
grant update on table "public"."bookings" to "service_role";
grant insert on table "public"."bookings" to "service_role";

-- RLS Policies

-- Enable users to insert bookings for their own profile
create policy "Enable insert for users based on profile ownership"
on "public"."bookings"
as permissive
for insert
to authenticated
with check (
    EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE profiles.id = bookings.profile_id 
        AND profiles.user_id = (SELECT auth.uid())
        AND profiles.deleted_at IS NULL
    )
);

-- Enable users to view their own bookings (not soft deleted)
create policy "Enable users to view their own bookings"
on "public"."bookings"
as permissive
for select
to authenticated
using (
    (deleted_at IS NULL) AND 
    EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE profiles.id = bookings.profile_id 
        AND profiles.user_id = (SELECT auth.uid())
        AND profiles.deleted_at IS NULL
    )
);

-- Enable users to update their own bookings
create policy "Enable users to update their own bookings"
on "public"."bookings"
as permissive
for update
to authenticated
using (
    EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE profiles.id = bookings.profile_id 
        AND profiles.user_id = (SELECT auth.uid())
        AND profiles.deleted_at IS NULL
    )
)
with check (
    EXISTS (
        SELECT 1 FROM public.profiles 
        WHERE profiles.id = bookings.profile_id 
        AND profiles.user_id = (SELECT auth.uid())
        AND profiles.deleted_at IS NULL
    )
);

